/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package View;

import java.sql.*;
import Project.ConnectionProvider;
import javax.swing.JOptionPane;
import java.awt.event.ActionListener; 
import Model.BookModel;
import javax.swing.table.DefaultTableModel;


/**
 *
 * @author Thanuja
 */
public class BookView extends javax.swing.JFrame {

    /**
     * Creates new form Book
     */
    public BookView() {
        initComponents();
        displayBooks(); 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    
    public void clearFields() {
    BookIdfield.setText("");
    bookNamefield.setText("");
    Authorfield.setText("");
    categoryfield.setSelectedIndex(0); // Reset to the first item in the combo box
    quantityfield.setText("");
    pricefield.setText("");
}
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bookLabel = new javax.swing.JLabel();
        booknameLabel = new javax.swing.JLabel();
        authorLabel = new javax.swing.JLabel();
        categoryLabel = new javax.swing.JLabel();
        quantityLabel = new javax.swing.JLabel();
        bookNamefield = new javax.swing.JTextField();
        BookIdfield = new javax.swing.JTextField();
        pricefield = new javax.swing.JTextField();
        categoryfield = new javax.swing.JComboBox<>();
        update = new javax.swing.JButton();
        cancel = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        Authorfield = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        quantityfield = new javax.swing.JTextField();
        priceLabel1 = new javax.swing.JLabel();
        create1 = new javax.swing.JButton();
        serachData = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        searchBtn = new javax.swing.JButton();
        delete = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(new java.awt.Point(300, 150));
        setMinimumSize(new java.awt.Dimension(1001, 544));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        bookLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        bookLabel.setText("Book ID");
        getContentPane().add(bookLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 130, 95, 20));

        booknameLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        booknameLabel.setText("Book Name");
        getContentPane().add(booknameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 180, 95, -1));

        authorLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        authorLabel.setText("Author");
        getContentPane().add(authorLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 230, 95, -1));

        categoryLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        categoryLabel.setText("Category");
        getContentPane().add(categoryLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 280, 95, -1));

        quantityLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        quantityLabel.setText("Quantity");
        getContentPane().add(quantityLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 330, 95, -1));

        bookNamefield.setPreferredSize(new java.awt.Dimension(100, 20));
        bookNamefield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookNamefieldActionPerformed(evt);
            }
        });
        getContentPane().add(bookNamefield, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 180, 230, 30));

        BookIdfield.setPreferredSize(new java.awt.Dimension(100, 20));
        getContentPane().add(BookIdfield, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 129, 230, 30));

        pricefield.setPreferredSize(new java.awt.Dimension(100, 20));
        pricefield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pricefieldActionPerformed(evt);
            }
        });
        getContentPane().add(pricefield, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 380, 230, 30));

        categoryfield.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Scientific", "Adventure", "Cartoon", "Story", "Computer Science" }));
        categoryfield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                categoryfieldActionPerformed(evt);
            }
        });
        getContentPane().add(categoryfield, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 280, 230, 30));

        update.setBackground(javax.swing.UIManager.getDefaults().getColor("Actions.Blue"));
        update.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        update.setText("Update");
        update.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });
        getContentPane().add(update, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 450, 90, 35));

        cancel.setBackground(javax.swing.UIManager.getDefaults().getColor("Actions.Red"));
        cancel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        cancel.setText("Cancel");
        cancel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelActionPerformed(evt);
            }
        });
        getContentPane().add(cancel, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 450, 90, 35));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabel1.setText("Manage Books");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 40, 270, -1));

        Authorfield.setPreferredSize(new java.awt.Dimension(100, 20));
        Authorfield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AuthorfieldActionPerformed(evt);
            }
        });
        getContentPane().add(Authorfield, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 230, 230, 30));

        Table.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Book ID", "Book Name", "Author", "Category", "Quantity", "Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Table.setPreferredSize(new java.awt.Dimension(500, 400));
        jScrollPane1.setViewportView(Table);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 180, 590, 300));

        quantityfield.setPreferredSize(new java.awt.Dimension(100, 20));
        quantityfield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quantityfieldActionPerformed(evt);
            }
        });
        getContentPane().add(quantityfield, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 330, 230, 30));

        priceLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        priceLabel1.setText("Price");
        getContentPane().add(priceLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 380, 95, -1));

        create1.setBackground(javax.swing.UIManager.getDefaults().getColor("Actions.Blue"));
        create1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        create1.setText("Create");
        create1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        create1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                create1ActionPerformed(evt);
            }
        });
        getContentPane().add(create1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 450, 90, 35));

        serachData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                serachDataActionPerformed(evt);
            }
        });
        getContentPane().add(serachData, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 130, 290, 30));

        jLabel5.setText("Search By ID");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 100, -1, -1));

        searchBtn.setText("Search");
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });
        getContentPane().add(searchBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 130, 90, 30));

        delete.setBackground(javax.swing.UIManager.getDefaults().getColor("Actions.Red"));
        delete.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        delete.setText("Delete");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });
        getContentPane().add(delete, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 130, 80, 30));

        pack();
    }// </editor-fold>//GEN-END:initComponents

       private void displayBooks() {
        try (Connection con = ConnectionProvider.getCon();
             PreparedStatement pst = con.prepareStatement("SELECT * FROM books");
             ResultSet rs = pst.executeQuery()) {

            DefaultTableModel model = new DefaultTableModel(new Object[]{"Book ID", "Book Name", "Author", "Category", "Quantity", "Price"}, 0);
            while (rs.next()) {
                model.addRow(new Object[]{
                    rs.getString("id"),
                    rs.getString("name"),
                    rs.getString("author"),
                    rs.getString("category"),
                    rs.getInt("quantity"),
                    rs.getDouble("price")
                });
            }
            Table.setModel(model);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Database error: " + e.getMessage());
        }
    }
    
    
      private void searchBook(String id) {
        try (Connection con = ConnectionProvider.getCon();
             PreparedStatement pst = con.prepareStatement("SELECT * FROM books WHERE id = ?");
        ) {
            pst.setString(1, id);
            ResultSet rs = pst.executeQuery();
            if (rs.next()) {
                BookIdfield.setText(rs.getString("id"));
                bookNamefield.setText(rs.getString("name"));
                Authorfield.setText(rs.getString("author"));
                categoryfield.setSelectedItem(rs.getString("category"));
                quantityfield.setText(String.valueOf(rs.getInt("quantity")));
                pricefield.setText(String.valueOf(rs.getDouble("price")));
            } else {
                JOptionPane.showMessageDialog(this, "Book not found with ID: " + id);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Database error: " + e.getMessage());
        }
    }

    // Method to update a book
    private void updateBook() {
        String id = BookIdfield.getText();
        String name = bookNamefield.getText();
        String author = Authorfield.getText();
        String category = (String) categoryfield.getSelectedItem();
        int quantity = Integer.parseInt(quantityfield.getText());
        double price = Double.parseDouble(pricefield.getText());

        try (Connection con = ConnectionProvider.getCon();
             PreparedStatement pst = con.prepareStatement("UPDATE books SET name=?, author=?, category=?, quantity=?, price=? WHERE id=?")) {

            pst.setString(1, name);
            pst.setString(2, author);
            pst.setString(3, category);
            pst.setInt(4, quantity);
            pst.setDouble(5, price);
            pst.setString(6, id);

            int rowsUpdated = pst.executeUpdate();
            if (rowsUpdated > 0) {
                JOptionPane.showMessageDialog(this, "Book updated successfully");
                clearFields();
                displayBooks(); // Refresh table after update
            } else {
                JOptionPane.showMessageDialog(this, "Failed to update book");
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid number format: " + e.getMessage());
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Database error: " + e.getMessage());
        }
    }

    // Method to delete a book
    private void deleteBook(String id) {
        try (Connection con = ConnectionProvider.getCon();
             PreparedStatement pst = con.prepareStatement("DELETE FROM books WHERE id=?")) {

            pst.setString(1, id);

            int rowsDeleted = pst.executeUpdate();
            if (rowsDeleted > 0) {
                JOptionPane.showMessageDialog(this, "Book deleted successfully");
                clearFields();
                displayBooks(); // Refresh table after delete
            } else {
                JOptionPane.showMessageDialog(this, "Failed to delete book");
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Database error: " + e.getMessage());
        }
    }
    
    
    
    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
        // TODO add your handling code here:
updateBook();
    }//GEN-LAST:event_updateActionPerformed

    private void cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelActionPerformed
        // TODO add your handling code here:
         setVisible(false);
    }//GEN-LAST:event_cancelActionPerformed

    private void bookNamefieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookNamefieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bookNamefieldActionPerformed

    private void AuthorfieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AuthorfieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AuthorfieldActionPerformed

    private void categoryfieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_categoryfieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_categoryfieldActionPerformed

    private void pricefieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pricefieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pricefieldActionPerformed

    private void quantityfieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quantityfieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_quantityfieldActionPerformed

    private void create1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_create1ActionPerformed
        // TODO add your handling code here:
        String id = BookIdfield.getText();
    String name = bookNamefield.getText();
    String author = Authorfield.getText();
    String category = (String) categoryfield.getSelectedItem();
    int quantity = Integer.parseInt(quantityfield.getText());
    double price = Double.parseDouble(pricefield.getText());

    try (Connection con = ConnectionProvider.getCon();
         PreparedStatement pst = con.prepareStatement("INSERT INTO books (id, name, author, category, quantity, price) VALUES (?, ?, ?, ?, ?, ?)")) {

        pst.setString(1, id);
        pst.setString(2, name);
        pst.setString(3, author);
        pst.setString(4, category);
        pst.setInt(5, quantity);
        pst.setDouble(6, price);

        int rowsInserted = pst.executeUpdate();
        if (rowsInserted > 0) {
            JOptionPane.showMessageDialog(this, "Book added successfully");
            clearFields();
            displayBooks(); // Update table after successful insertion
        } else {
            JOptionPane.showMessageDialog(this, "Failed to add book");
        }
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Invalid number format: " + e.getMessage());
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Database error: " + e.getMessage());
    }
    }//GEN-LAST:event_create1ActionPerformed

    private void serachDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_serachDataActionPerformed
        // TODO add your handling code here:
        
        
    }//GEN-LAST:event_serachDataActionPerformed

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
     String id = serachData.getText();
        searchBook(id);
    }//GEN-LAST:event_searchBtnActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
       String id = BookIdfield.getText();
        deleteBook(id);
    }//GEN-LAST:event_deleteActionPerformed

    // Getters for all components needed by the controller
    public javax.swing.JButton getCreateButton() {
        return create1;
    }

    public javax.swing.JButton getUpdateButton() {
        return update;
    }

    public javax.swing.JButton getDeleteButton() {
        return delete;
    }

    public javax.swing.JButton getSearchButton() {
        return searchBtn;
    }

    public javax.swing.JTextField getBookIdField() {
        return BookIdfield;
    }

    public javax.swing.JTextField getBookNameField() {
        return bookNamefield;
    }

    public javax.swing.JTextField getAuthorField() {
        return Authorfield;
    }

    public javax.swing.JComboBox<String> getCategoryField() {
        return categoryfield;
    }

    public javax.swing.JTextField getQuantityField() {
        return quantityfield;
    }

    public javax.swing.JTextField getPriceField() {
        return pricefield;
    }

    public javax.swing.JTextField getSearchField() {
        return serachData;
    }

    public javax.swing.JTable getTable() {
        return Table;
    }

    // Add action listeners to buttons
    public void addCreateListener(ActionListener actionListener) {
        create1.addActionListener(actionListener);
    }

    public void addUpdateListener(ActionListener actionListener) {
        update.addActionListener(actionListener);
    }

    public void addDeleteListener(ActionListener actionListener) {
        delete.addActionListener(actionListener);
    }

    public void addSearchListener(ActionListener actionListener) {
        searchBtn.addActionListener(actionListener);
    }

    // Method to display a message dialog
    public void showMessage(String message) {
        JOptionPane.showMessageDialog(this, message);
    }

    // Method to set data in the table
    public void setTableData(DefaultTableModel model) {
        Table.setModel(model);
    }
    
    public static void main(String args[]) {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                
               new BookView().setVisible(true);
            }
        });
    }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Authorfield;
    private javax.swing.JTextField BookIdfield;
    private javax.swing.JTable Table;
    private javax.swing.JLabel authorLabel;
    private javax.swing.JLabel bookLabel;
    private javax.swing.JTextField bookNamefield;
    private javax.swing.JLabel booknameLabel;
    private javax.swing.JButton cancel;
    private javax.swing.JLabel categoryLabel;
    private javax.swing.JComboBox<String> categoryfield;
    private javax.swing.JButton create1;
    private javax.swing.JButton delete;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel priceLabel1;
    private javax.swing.JTextField pricefield;
    private javax.swing.JLabel quantityLabel;
    private javax.swing.JTextField quantityfield;
    private javax.swing.JButton searchBtn;
    private javax.swing.JTextField serachData;
    private javax.swing.JButton update;
    // End of variables declaration//GEN-END:variables

   
}
